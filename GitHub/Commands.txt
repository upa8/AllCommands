Git helpful commands 


*) 
	To give username 

	-- git config --global user.name "username"

	To give email 

	-- git config --global user.email "email@email.com"
*)
	To create SSH key 
	-- ssh-keygen -t rsa -C "email"

	To check ssh key 
	-- ssh -T git@github.com

*) 
	To Start a project . 

	--  git init project_name 

*) 
	To get status of project 
	-- git status

*)
	To add files into git 

	-- git add filename

*)
	To add all files into git 
	-- git add . 

*)

	To remove files from git 
	-- git rm --cached filename

*)
	To commit with message 
	-- git commit -m "Message OF Commit "

*)
	To get log information 
	-- git log 

*) 
	To get log information in oneline
	-- git log --oneline 

*) 

	To find difference in files 
	-- git diff

	or see the cached changes 
	-- git diff --cached

*)
	To do fast commit with addition of changes 

	-- git commit -a -m "message"

*)
	To see status in short 
	-- git status -s

*)
	To connect to remote repository from local repository 
	-- git remote add origin git@github.com:upa8/test.git
		
	THIS IS SSH ADDRESS OF YOU REPOSITORY 

*)	To push files into our remote repository 
	-- git push origin master 

*)
	TO see the branches
	-- git branch 

*)	To create new branch 
	-- git branch branch_name 

*)
	To change branch 
	-- git checkout branch_name 

*)
	To clone the remote repository 
	-- git clone (shh link )

*)
	To go to commit id 
	-- git reset 12344455555531

*)
	To use pull 
	-- git pull origin branch_name

*)
	Tagging 
	--git tag -a version_name -m "Comments"
*)
	To see all the tags
	--git tag 

*)	To check particula tag
	--git show v1.0

*)

	To push tags
	--git push github v1.0
*)
	To push all the tags 
	-- git push github --tag

*)
	To go to particular commit 
	--git checkout commid_id

*)
	To go back to current state 
	-- git checkout master

*)
	similar for tag 
	-- tag checkout tag_name

*) 
	To merge a slave branch into master branch 
	-- git merge Slave
*)	To delete branch 
	-- git branch -d branchName 


*) 	To find all branches 
	-- git branch 

*) 	To find all config details 
	-- git config -l




****************Github workflow***********************
------------------------------------------------------

How to Use Git with Github . 

1) Create any repository 
	-- git init repositoryName 

	otherwise 

	-- git init 
2) now check the remote repositories 
	git remote -v 

	if it is giving any output then you are connected to some repositories on github 
	otherwise not . 
3) if you want to get connected to any repository from github 
	git remote add global githublink 

4) now if you do
	git remote -v 

	you will see that you are connected to global 

5) Now you can dowanload the exact project into your repository by just saying 

	git pull global master

6) To send data to repository 
	git push global master
---------------------------------------------------

Now suppose you are working with someone else repository . 
Lets take example , 
	Now you want to use repository of Pratik Upacharya , which is ProgrammingQeustion . 
	So , first Fork that repository into your account . 

	1)Now , in your computer , 
	Create any folder 
	Go into that folder 
	Open GitBash shell 
	type following 
	git init 
	2) Now you just create a blank git project 
	Now you want to connect this blank project to Pratik Upacharya's repository ,as well as Your repository 

	If you want to check how many repositories you are connected , 
	just check it by following command 
	git remote -v 

	At this moment this command will not give any output because you are not connected to any repository . 
	So now connect to Pratik Upacharya's repository 

	git remote add global pratik_upacharya_ki_repositoryki_link 

	here we are using 'global' word after add bcoz pratik upacharya's repository is main repository and it is global repository . 

	now you check how many repositories you are connected to by following commands
	git remote -v 

	it will output two global repositories . Now fetch that repository into your repository 
	git pull global master 

	3) Now you have Up to date global repository . 
	Now create an connection with Your repository .
	git remote add local linkOfYourRepositoryInYourAccount 

	now check 
	git remote -v 

	you will see two global and two local repositories 

	4) Now create a branch called local 
	git branch local 
	5) now shift into that branch 
	git checkout local 
	6) Now you are in local , 
	Now fetch your local repository 
	git pull local master
	7) Now you have local repository in your local branch 
	and Pratik Upacharya's repository in master branch right ? 

	Now make whatever changes you want to make , make them into local branch . 
	and whaterver commits you want to perform , perform them on local branch . 
	Now you shift back to master branch , 
	git checkout master 

	Before merging , you should check whether master branch has been updated by pratik uparcharya or not ,you can do that by simple checking 
	git pull global master 

	now you have to merge your local branch with master branch . 
	You should be in master branch to do that . 
	To go into master brach 
	git checkout master
	now merger master and local
	git merge local

	merging is done . Now 
	git add .
	git commit -m "message"


	now you have added all the changes into your branch . 
	Now you just need to update your local repository in your github account 
	so make a push repquest to your local repository 
	git push local master 

	all data is uploaded into your local repository of your website . 
	Now push all this changes into Pratik Upacharya's repository 
	goto website and go into your repository , make a pull request from their . 
	I will get a pull request , I will accept it . I will merge it with main repository . 
	Thats it . 

	Now , in your computer you have two branches , 
	1) master 
	2) local 
	master is up to date , but local is not up to date . 
	so merger local with master . 
	go to local branch 
	git checkout local 
	now merge local with master 
	git merge master

	now your both local and master repositories are up to date . 

	Again , if you get any merge conflict then watch youtube video's how to resolve merge conflits
	

--------------------------------------------------------------------------	





















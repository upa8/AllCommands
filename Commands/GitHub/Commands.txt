Git helpful commands 


*) 
	To give username 

	-- git config --global user.name "username"

	To give email 

	-- git config --global user.email "email@email.com"
*)
	To create SSH key 
	-- ssh-keygen -t rsa -C "email"

	To check ssh key 
	-- ssh -T git@github.com

*) 
	To Start a project . 

	--  git init project_name 

*) 
	To get status of project 
	-- git status

*)
	To add files into git 

	-- git add filename

*)
	To add all files into git 
	-- git add . 

*)

	To remove files from git 
	-- git rm --cached filename

*)
	To commit with message 
	-- git commit -m "Message OF Commit "

*)
	To get log information 
	-- git log 

*) 
	To get log information in oneline
	-- git log --oneline 

*) 

	To find difference in files 
	-- git diff

	or see the cached changes 
	-- git diff --cached

*)
	To do fast commit with addition of changes 

	-- git commit -a -m "message"

*)
	To see status in short 
	-- git status -s

*)
	To connect to remote repository from local repository 
	-- git remote add origin git@github.com:upa8/test.git
		
	THIS IS SSH ADDRESS OF YOU REPOSITORY 

*)	To push files into our remote repository 
	-- git push origin master 

*)
	TO see the branches
	-- git branch 

*)	To create new branch 
	-- git branch branch_name 

*)
	To change branch 
	-- git checkout branch_name 

*)
	To clone the remote repository 
	-- git clone (shh link )

*)
	To go to commit id 
	-- git reset 12344455555531

*)
	To use pull 
	-- git pull origin branch_name

*)
	Tagging 
	--git tag -a version_name -m "Comments"
*)
	To see all the tags
	--git tag 

*)	To check particula tag
	--git show v1.0

*)

	To push tags
	--git push github v1.0
*)
	To push all the tags 
	-- git push github --tag

*)
	To go to particular commit 
	--git checkout commid_id

*)
	To go back to current state 
	-- git checkout master

*)
	similar for tag 
	-- tag checkout tag_name

*) 
	To merge a slave branch into master branch 
	-- git merge Slave
*)	To delete branch 
	-- git branch -d branchName 


*) 	To find all branches 
	-- git branch 

*) 	To find all config details 
	-- git config -l

*) 	To rebase interactive 
	-- git rebase -i


*) 	To check working and Index area difference 
	-- git diff 

*) 	To check Index and Repository aread difference 
	-- git --cached

*)	To check difference between two branches
	-- git diff branch1 branch2

*) 	To remove file completely 
	-- git rm -f filename

*)	To move file into staging area 
	-- git rm --cached filename

*)	To add files into stash 
	-- git stash --include-untracked

*) 	To read content of stash 
	-- git stash list

*)	To get back stash 
	-- git stash apply 

*) 	To clear the stash 
	-- git stash clear
	
*) 	To see content of particular stash 
	-- git stash show -p stash@{0}

*) 	To apply specific stash 
	--git stash apply stash@{n}

*) 	To get advanced git log 
	-- git log --graph --decorate --oneline

*)	To get detail information about commit 
	-- git show commitId

*)	To get details 
	-- git show HEAD~4

*)	To get one month ago
	-- git show HEAD@{"1 month ago"}

*)	TO find who changed the file
	-- git blame filename 

*)	To find difference between two commits 
	-- git diff HEAD HEAD~2

*)	To get help related to particular command 
	-- git help log 

*) 	To get more about git log (what changed in commit" 
	-- git log --patch

*)	To get commit with word apples 
	-- git log --grep apples --oneline

*) 	To get commites which changed or delete the word 
	apples
	-- git log -Gapples --patch 

*)	To get limited logs 
	-- git log -3 --oneline 
	-- git log HEAD~5..HEAD^ --oneline 

*)	To compare histroy of two branch
	-- git log branch1..branch2 --oneline

*)      To change latest commit 
	-- git commit --amend -m "New message"

*) 	To find histroy of all commits 
	-- git reflog --oneline

*)	To do interactive stagging 
	-- git add -p

*)	To create a branch with checkout and switch into that branch 
	-- git checkout -b branchName 

*)  To abort merge 
	-- git merge --abort 

*)  To use previous merge settings
	-- git config --local rerere.enabled true

*) 	To avoid fast forward 
	-- git merge branch --no -ff

*) 	

Explore this commands 

*) 	-- git bisect 
	-- git rerere
	-- git help
	-- git filter-branch
	-- git fetch
	-- git clean
	-- git reflog
	-- git cherry-pick
	-- git brame
	-- git grep
	-- git diff



Points to create article on git

Importance of git 
* Can explore past 
* Fix mistakes in past 
* Git workflows 
* Command line is friend 
* GUI is also there 
* Four working areas : Stash , Working area , Index , Repository
* Git is the only version control system which allows us to modify index directly 






